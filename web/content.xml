<?xml version="1.0" encoding="ISO-8859-1"?>
<cms:pageset 
  xmlns:cms="http://www.qumranet.com/silly-cms"
  xmlns="http://www.w3.org/1999/xhtml" 
  xmlns:xhtml="http://www.w3.org/1999/xhtml" 
>
  <cms:page name="index">
     <cms:menuitem>About</cms:menuitem>
     <cms:title>KVM: Kernel-based Virtual Machine for Linux</cms:title>
     <cms:content>

        <p>
           <b>KVM</b> (for Kernel-based Virtual Machine) is a full
           virtualization solution for Linux on x86 hardware.  It consists
           of a loadable kernel module (<code>kvm.ko</code>) and a userspace
           component.
        </p>

        <p>
           Using KVM, one can run multiple virtual machines running
           unmodified Linux or Windows images.  Each virtual machine has
           private virtualized hardware: a network card, disk, graphics
           adapter, etc.
        </p>

        <p>
           The kernel component of KVM is included in mainline Linux, and
           will appear in Linux 2.6.20.
        </p>

        <p>
           KVM is open source software.
        </p>

     </cms:content>
  </cms:page>

  <cms:page name="status">
     <cms:menuitem>Status</cms:menuitem>
     <cms:title>Status</cms:title>
     <cms:content>

       <p>
          Currently, KVM is stable (at least with the guests we test :),
          and is fast enough for desktop use on recent processors.  For
          server workloads, an optimized version of the MMU virtualization is
          needed.  This is currently in progress.
       </p>

       <p>
          KVM is available as a patch to recent Linux kernel versions and
          as an external module that can be used with your favorite distro-
          provided kernel.  We are working to merge KVM into Linux so that
          the functionality is available with no hassle.
       </p>

       <p>
          Working:
          <ul>
             <li>Intel-based hosts (requires VT capable processors)</li>
             <li>AMD-based hosts (requires SVM capable processors)</li>
             <li>Linux guests (32-bit and 64-bit)</li>
             <li>Windows guests (32-bit)</li>
             <li>SMP hosts</li>
             <li>Non-live migration of guests from one machine to another</li>
         </ul>
       </p>

       <p>
          In progress:
          <ul>
             <li>Optimized MMU virtualization</li>
             <li>Live migration</li>
          </ul>
       </p>

       <p>
          Planned:
          <ul>
             <li>SMP guests</li>
          </ul>
       </p>

     </cms:content>
  </cms:page>

  <cms:page name="howto">
     <cms:menuitem>HOWTO</cms:menuitem>
     <cms:title>Getting KVM to run on your machine</cms:title>

     <cms:content>

       <p>
          You will need (see download section):
          <ul>
             <li><code>kvm-<i>release</i>.tar.gz</code></li>
             <li>A VT capable Intel processor, or an SVM capable AMD 
                 processor</li>
             <li>qemu prerequisites:
                <ul>
                   <li><code>gcc</code> 3.x</li>
                   <li><code>SDL</code> libraries and headers</li>
                   <li><code>zlib</code> libraries and headers</li>
                   <li><code>alsa</code> libraries and headers</li>
                   <li><code>libuuid</code> libraries and headers (from
                       e2fsprogs-devel)</li>
                </ul>
             </li>
          </ul>
       </p>

       <p>
          Please report problems (and successes) to the <a href="lists.html">
          mailing list</a>.
       </p>

       <p>
          Steps:
          <ol>
             <li>
                <p>
                Unpack and configure the kvm components:
                </p>
                <p>If you are using a patched kernel (e.g. a recent -mm 
                   kernel), configure the kernel normally, boot into it, and:

                <pre>
tar xzf kvm-<i>release</i>.tar.gz
cd kvm-<i>release</i>
./configure --prefix=/usr/local/kvm --with-patched-kernel
make
sudo make install
sudo /sbin/modprobe kvm-intel
# or: sudo /sbin/modprobe kvm-amd
</pre>
             </p>

             <p>
                If you're <i>not</i> running a patched kernel:
                <pre>
tar xzf kvm-<i>release</i>.tar.gz
cd kvm-<i>release</i>
./configure --prefix=/usr/local/kvm
make
sudo make install
sudo /sbin/modprobe kvm-intel
# or: sudo /sbin/modprobe kvm-amd
</pre>
             </p>
             </li>                

             <li>
                Create a disk image:
                <pre>
/usr/local/kvm/bin/qemu-img create -f qcow vdisk.img 10G
</pre>
             </li>

             <li>
                Install an operating system:
                <pre>
sudo /usr/local/kvm/bin/qemu-system-x86_64 \
 -hda vdisk.img \
 -cdrom /path/to/boot-media.iso \
 -boot d \
 -m 384
</pre>
             (use <code>qemu</code> instead of <code>qemu-system-x86_64</code>
              for i386)
             <br/>
              If you're installing Windows, add the <code>-no-acpi</code> flag.
             </li>

             <li>
                After installation is complete, run it with:
                <pre>
sudo /usr/local/kvm/bin/qemu-system-x86_64 \
 -hda vdisk.img \
 -boot c \
 -m 384
</pre>
             (use <code>qemu</code> instead of <code>qemu-system-x86_64</code>
              for i386)
             </li>

       
          </ol>
       </p>

     </cms:content>
  </cms:page>

  <cms:page name="opensuse">

     <cms:title>Prebuilt openSUSE packages</cms:title>
     <cms:menuitem>openSUSE</cms:menuitem>

     <cms:content>

      <p>
         Gerd Hoffman has provided prebuilt RPMs for openSUSE.
      </p>

      <p>
         To install and run kvm on openSUSE, follow these steps:
         <ol>
             <li>
               Add 
http://software.opensuse.org/download/home:/kraxel/SUSE_Linux_10.1/
(correct for your version) to your yast software repositories
             </li>
             <li>
               Use yast to install the kvm and kvm-kmp RPMs
             </li>
             <li>
                Create a disk image:
                <pre>
qemu-img create -f qcow vdisk.img 10G
</pre>
             </li>

             <li>
                Install an operating system:
                <pre>
sudo qemu-kvm-x86_64 \
 -hda vdisk.img \
 -cdrom /path/to/boot-media.iso \
 -boot d \
 -m 384
</pre>
             <br/>
              If you're installing Windows, add the <code>-no-acpi</code> flag.
             </li>

             <li>
                After installation is complete, run it with:
                <pre>
sudo qemu-kvm-x86_64 \
 -hda vdisk.img \
 -boot c \
 -m 384
</pre>
             </li>

             <li>
                To load the kvm module at system boot edit 
                <code>/etc/sysconfig/kernel</code> and
                add <code>kvm</code> to the 
                <code>MODULES_LOADED_ON_BOOT="..."</code> line.  Or use the
                yast2 sysconfig module to do that change.
             </li>

             <li>
                The package creates a new group "<code>kvm</code>".  You can
                allow non-root users use hardware-accelerated qemu by adding
                them to the group.
             </li>

         </ol>
      </p>
       
     </cms:content>

  </cms:page>

  <cms:page name="debian">

     <cms:title>KVM on Debian</cms:title>
     <cms:menuitem>Debian</cms:menuitem>

     <cms:content>

      <p>
         Baruch Even has integrated kvm into the debian archive.
      </p>

      <p>
         To install and run kvm on Debian, follow these steps:
         <ol>
             <li>
               Run the commands <pre>
sudo apt-get install kvm kvm-source
sudo m-a build kvm &amp;&amp; sudo m-a install kvm &amp;&amp; sudo modprobe kvm
</pre>
             </li>
             <li>
                Create a disk image:
                <pre>
qemu-img create -f qcow vdisk.img 10G
</pre>
             </li>

             <li>
                Install an operating system:
                <pre>
sudo kvm \
 -hda vdisk.img \
 -cdrom /path/to/boot-media.iso \
 -boot d \
 -m 384
</pre>
             <br/>
              If you're installing Windows, add the <code>-no-acpi</code> flag.
             </li>

             <li>
                After installation is complete, run it with:
                <pre>
sudo kvm \
 -hda vdisk.img \
 -boot c \
 -m 384
</pre>
             </li>
         </ol>
      </p>
       
     </cms:content>

  </cms:page>

  <cms:page name="lists">
     <cms:menuitem>Lists, IRC</cms:menuitem>
     <cms:title>Mailing Lists</cms:title>
     <cms:content>

       <p>
          kvm has a sourceforge.net mailing list, 
          <code>kvm-devel@lists.sourceforge.net</code>.
       </p>

       <p>
          To subscribe, click <a href=
          "http://lists.sourceforge.net/mailman/listinfo/kvm-devel">here</a>.
       </p>

       <p>
         Archives:
         <ul>
           <li><a href="http://sourceforge.net/mailarchive/forum.php?forum_id=50582">Sourceforge</a></li>
           <li><a href="http://news.gmane.org/gmane.comp.emulators.kvm.devel">
              Gmane</a></li>
         </ul>
       </p>

       <h2>IRC</h2>

       <p>
         Join us on <b>#kvm</b> at freenode.
       </p>

     </cms:content>
  </cms:page>

  <cms:page name="Documents">
     <cms:menuitem>Documents</cms:menuitem>
     <cms:title>Documents</cms:title>
     <cms:content>
       <p>
         White papers:
         <ul>
           <li><a href="http://www.qumranet.com/wp/kvm_wp.pdf">kvm whitepaper</a></li>
          </ul>
       </p>

     </cms:content>
  </cms:page>

  
  <cms:page href="http://sourceforge.net/project/showfiles.php?group_id=180599">
     <cms:menuitem>Download</cms:menuitem>
  </cms:page>

  <cms:page href="http://sourceforge.net/tracker/?group_id=180599">
     <cms:menuitem>Bugs</cms:menuitem>
  </cms:page>

  <cms:page name="code">
     <cms:menuitem>Code</cms:menuitem>
     <cms:title>Source Control</cms:title>

     <cms:content>

       <p>
          The source code for kvm is available through <code>subversion</code>.
          Read-only access is provided through the URL
          <code>svn://kvm.qumranet.com/kvm</code>.
       </p>

       <p>
          To check out the trunk, type
<pre>
svn checkout svn://kvm.qumranet.com/kvm/trunk some-name
</pre>

          To check out the release branch (that is submitted to -mm), type
<pre>
svn checkout svn://kvm.qumranet.com/kvm/branches/release some-name
</pre>

          To view the list of branches, type
<pre>
svn ls svn://kvm.qumranet.com/kvm/branches
</pre>
       </p>

     </cms:content>

  </cms:page>

  <cms:page name="todo">
     <cms:menuitem>TODO</cms:menuitem>
     <cms:title>TODO</cms:title>

     <cms:content>

       <p>
          The following items need some love.  Please post to the list
          if you are interested in helping out:

          <ul>
              <li>
                  Real mode support: VT support for real mode is terrible, so
                  we need to do it in software.  This means extending the
                  x86 emulator (<code>x86_emulate.c</code>) to handle more
                  instructions, and changing the execution loop to call the
                  emulator for real mode.
              </li>
              <li>
                  Fedora kernel package: packaging kernel modules is a rather
                  arcane stuff.  We already have volunteers for openSUSE and
                  Debian; we need packages for Fedora.
              </li>
          </ul>
        </p>

       <p>
         The following smaller scale tasks can be a nice entry point
         to someone wishing to get involved:

         <ul>
            <li>
               Enforce the virtual time stamp counter monotonicity even when
               a vcpu is migrated to another physical cpu.
            </li>
            <li>
               Consolidate the msr code where the handling is common to
               intel and amd.
            </li>
            <li>
               Avoid saving/loading the floating point unit state on
               each vm entry/exit.
            </li>
         </ul>
        </p>

     </cms:content>

  </cms:page>

  <cms:page name="faq">
     <cms:menuitem>FAQ</cms:menuitem>
     <cms:title>Frequently Asked Questions</cms:title>
     <cms:content>
        
       <p class="q">
          What do I need to use kvm?
       </p>

       <p>
          You will need an x86 machine running a recent Linux kernel on an
          Intel processor with VT (virtualization technology) extensions, or
          an AMD processor with SVM extensions (also called AMD-V).
       </p>

       <hr/>

       <p class="q">
          What is Intel VT / AMD-V?
       </p>
       <p>
          <a href="http://www.intel.com/technology/itj/2006/v10i3/1-hardware/6-vt-x-vt-i-solutions.htm">Intel VT</a> 
          and <a href="http://www.amd.com/us-en/Processors/ProductInformation/0,,30_118_8826_14287,00.html">AMD's AMD-V</a> 
          are instruction set extensions that provide
          hardware assistance to virtual machine monitors.  They enable
          running fully isolated virtual machines at native hardware speeds,
          for some workloads.
       </p>

       <hr/>

       <p class="q">
          How can I tell if I have Intel VT or AMD-V?
       </p>
       <p>
          With a recent enough Linux kernel, run the command:
          <pre>egrep '^flags.*(vmx|svm)' /proc/cpuinfo</pre>
          If something shows up, you have VT.  You can also check the processor
          model name (in <code>/proc/cpuinfo</code>) in the vendor's web site.
       </p>
       <p>
          Note that some manufacturers disable VT in the machine's BIOS, in
          such a way that it cannot be re-enabled.
       </p>

       <hr/>

       <p class="q">
          What user space tools does kvm use?
       </p>
       <p>
          kvm uses a slightly modified <a href="http://www.qemu.com">qemu</a>
          program to instantiate the virtual machine.  Once running, a virtual
          machine is just a regular process.  You can use <code>top(1)</code>,
          <code>kill(1)</code>, <code>taskset(1)</code> and similar tools to
          manage virtual machines.
       </p>
      
       <hr/>

       <p class="q">
          What virtual disk formats can kvm use?
       </p>
       <p>
          kvm inherits a wealth of disk formats support from qemu; it supports
          raw images, the native qemu format (qcow), VMware format, and many
          more.
       </p>

       <hr/>

       <p class="q">
          What is the difference between kvm and Xen?
       </p>
       <p>
          Xen is an external hypervisor; it assumes control of the machine
          and divides resources among guests.  On the other hand, kvm is
          part of Linux and uses the regular Linux scheduler and memory
          management. This means that kvm is much smaller and simpler to use.
       </p>
       <p>
          On the other hand, Xen supports both full virtualization and a
          technique called paravirtualization, which allows better performance
          for modified guests.  kvm does not at present support
          paravirtualization.
       </p>

       <hr/>

       <p class="q">
          What is the difference between kvm and VMWare?
       </p>
       <p>
          VMware is a proprietary product.  kvm is Free Software released
          under the GPL.
       </p>

       <hr/>

       <p class="q">
          What is the difference between kvm and QEMU?
       </p>
       <p>
          Qemu uses emulation; kvm uses processor extensions for
          virtualization.
       </p>

       <hr/>

       <p class="q">
          Do you have a port of kvm for Windows?
       </p>
       <p>
          Not in this release.
       </p>

       <hr/>   

       <p class="q">
          What kernel version does it work with?
       </p>
       <p>
          kvm should work with any recent kernel (2.6.16 and above, likely
          even earlier)
       </p>

       <hr/>   

       <p class="q">
          How much RAM do I need?
       </p>
       <p>
          You will need enough memory to let the guest run comfortably
          while keeping enough for the host. 1GB is probably a minimum 
          configuration for the host OS.
       </p>

       <hr/>   

       <p class="q">
          What OSs can I run inside kvm VM?
       </p>
       <p>
          We have tested Linux (32/64 bit) and Windows (32 bit).  Others may
          or may not work.
       </p>

       <hr/>   

       <p class="q">
          Does kvm support a live migration feature to move virtual machines
          from one host to another without downtime?
       </p>
       <p>
          kvm today supports non-live migration, where there is a pause
          while memory content is transferred.  Pauseless live migration
          is work in progress.
       </p>

       <hr/>   

       <p class="q">
          Can kvm run a 32-bit guest on a 64-bit host?  What about PAE?
       </p>
       <p>
          kvm supports 32-bit guests on 64-bit hosts, and any combination of
          PAE and non-PAE guests and hosts.  The only unsupported combination
          is a 64-bit guest on a 32-bit host.
       </p>

       <hr/>   

       <p class="q">
          What happens if I kill -9 a VM process?
       </p>
       <p>
          From the guest's perspective, it is as if you yanked the power cord
          out.  From the host's perspective, the process is killed and all
          resources it uses are reclaimed.
       </p>

       <p class="q">
          Does kvm support SMP hosts?
       </p>
       <p>
          Yes.
       </p>

       <p class="q">
          What is the procedure to install a Windows guest?
       </p>
       <p>
          Currently Windows guest installation is broken. The problem arises
          from the APIC implementation. At the moment the APIC is emulated by
          qemu, which is not as tightly integrated to the kvm virtual cpu as it
          should be.  There is work in progress to implement the APIC within
          kvm to fix the problem.
       </p>
       <p>
          Until then, start qemu with the <code>-noapic</code> option.
          If you have a guest that uses the APIC HAL, the following workaround
          is suggested:
          <ol>
              <li>
                 Run the guest without kvm (<code>-no-kvm</code>)
                 <br/>
                 My Computer -> Properties -> Hardware -> Device Manager 
                 -> [Whatever under Computer] -> Properties -> Update Driver
                 ->  Not at this time -> Next -> Install from a list -> Next
                -> Don't search -> Next -> Standard PC -> Next.
                <br/> "Standard PC" is the noapic HAL.
              </li>
          </ol>
       </p>

       <p class="q">
          What is Qumranet's product?
       </p>
       <p>
          Qumranet is a startup company financed by <a href="http://www.sequoiacap.com/">Sequoia Capital</a> and 
          <a href="http://www.nvp.com/">Norwest Venture Partners (NVP)</a>. 
          The company is still in Stealth mode.
       </p>


     </cms:content>
  </cms:page>

  <cms:footer>
    <p><center>
       Interested in working for Qumranet?  <a href="mailto:jobs@qumranet.com">
       Send</a> your CV!
       </center>
    </p>
    <hr/>
    <p><center>
       kvm development is sponsored by 
       <a href="http://www.qumranet.com">Qumranet</a>.
       </center>
    </p>
    <p align="right">
           <a href="http://sourceforge.net">
               <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=180599&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" />
           </a>
    </p>
  </cms:footer>

</cms:pageset>
